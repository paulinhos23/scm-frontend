{"version":3,"sources":["exercises/accordion/accordion.js"],"names":["accordionComponent","accordionElement","document","querySelector","toggleContent","element","termContent","nextElementSibling","classList","contains","removeActiveTerm","toggle","activeTerm","remove","querySelectorAll","forEach","term","addEventListener","e","target","code"],"mappings":";;;AAmDA,aAnDA,QAAA,oBAEA,IAAMA,EAAqB,WAInBC,IAAAA,EAAmBC,SAASC,cAAc,oBAgB1CC,EAAgB,SAACC,GACfC,IAAAA,EAAcD,EAAQE,mBAIvBF,EAAQG,UAAUC,SAAS,2BAC9BC,IAGFL,EAAQG,UAAUG,OAAlB,0BACAL,EAAYE,UAAUG,OAAtB,mCAGID,EAAmB,WACjBE,IAAAA,EAAaX,EAAiBE,cAAc,2BAI9C,GAACS,EAAD,CACEN,IAAAA,EAAcM,EAAWL,mBAE/BK,EAAWJ,UAAUK,OAArB,0BACAP,EAAYE,UAAUK,OAAO,oCAlCNZ,EAAiBa,iBAAiB,wBAE1CC,QAAQ,SAAAC,GACrBA,EAAKC,iBAAiB,QAAS,SAACC,GAAMd,OAAAA,EAAcc,EAAEC,UACtDH,EAAKC,iBAAiB,WAAY,SAACC,GAElB,UAAXA,EAAEE,MAA+B,UAAXF,EAAEE,MAC5BhB,EAAcc,EAAEC,aAkCxBjB,SAASe,iBAAqC,mBAAA,WAAMjB,OAAAA","file":"accordion.c07a5649.map","sourceRoot":"..","sourcesContent":["import './accordion.scss';\n\nconst accordionComponent = () => {\n\n  // Define the root element that is used from different functions, usign data attributes\n  // JS hooks from CSS classes.\n  const accordionElement = document.querySelector('[data-accordion]');\n\n  const init = () => {\n    // Initialise the eventHandlers.\n    const accordionTerms = accordionElement.querySelectorAll('[data-accordionTerm]');\n\n    accordionTerms.forEach(term => {\n      term.addEventListener('click', (e) => toggleContent(e.target));\n      term.addEventListener('keypress', (e) => {\n        // If the key pressed is not Enter or Space, we won't trigger the toggle.\n        if (e.code !== 'Enter' && e.code !== 'Space') { return }\n        toggleContent(e.target);\n      });\n    });\n  }\n\n  const toggleContent = (element) => {\n    const termContent = element.nextElementSibling;\n\n    // in case the selected element is already active, we can assume we don't need to remove other\n    // active elements\n    if (!element.classList.contains('Accordion-term--active')) {\n      removeActiveTerm();\n    }\n\n    element.classList.toggle(`Accordion-term--active`);\n    termContent.classList.toggle(`Accordion-termContent--visible`);\n  }\n\n  const removeActiveTerm = () => {\n    const activeTerm = accordionElement.querySelector('.Accordion-term--active');\n    \n    // in order to avoid unnecessary logic and keep identation to the minimum, we check and return\n    // if there is no active element. Otherwise we go through the logic and remove the classes.\n    if (!activeTerm) { return }\n    const termContent = activeTerm.nextElementSibling;\n    \n    activeTerm.classList.remove(`Accordion-term--active`);\n    termContent.classList.remove('Accordion-termContent--visible');\n  }\n  \n  init();\n};\n\n// We initialise the Accordion logic once we have the HTML in place.\ndocument.addEventListener(`DOMContentLoaded`, () => accordionComponent());\n\n"]}