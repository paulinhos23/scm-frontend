{"version":3,"sources":["exercises/bonus/bonus.js"],"names":["bonusComponent","resultList","document","querySelector","modalWrapper","searchQuery","event","query","target","value","querySelectorAll","forEach","element","removeEventListener","openImage","innerHTML","fetch","then","response","ok","json","Error","statusText","collection","items","map","item","imageSrc","links","href","description","data","description_508","length","addImage","addEventListener","zeroResults","catch","err","errorRequest","error","toggleModal","classList","toggle","modalImage","src","alt"],"mappings":";;;AAyEA,aAzEA,QAAA,gBAEA,IAAMA,EAAiB,WAEfC,IAAAA,EAAaC,SAASC,cAAc,uBACpCC,EAAeF,SAASC,cAAc,qBAStCE,EAAc,SAACC,GACbC,IAAAA,EAAQD,EAAME,OAAOC,MAG3BR,EAAWS,iBAAiB,yBAAyBC,QAAS,SAAAC,GAAWA,OAAAA,EAAQC,oBAAoB,QAASC,KAC9Gb,EAAWc,UAAY,GACvBC,MAA8CT,wCAAAA,OAAAA,EAA9C,sBACCU,KAAK,SAAAC,GAEAA,GAAAA,EAASC,GACJD,OAAAA,EAASE,OAGZC,MAAAA,MAAMH,EAASI,cAGtBL,KAAK,SAAAG,GACEG,IAAAA,EAAaH,EAAKG,WAAWC,MAAMC,IAAI,SAAAC,GACpC,MAAA,CACLC,SAAUD,EAAKE,MAAM,GAAGC,KACxBC,YAAaJ,EAAKK,KAAK,GAAGC,mBAIzBT,EAAWU,QAKhBV,EAAWZ,QAAQuB,GACnBjC,EAAWS,iBAAiB,yBAAyBC,QAAS,SAAAC,GAC5DA,EAAQuB,iBAAiB,QAASrB,MANlCsB,EAAY7B,KAUf8B,MAAM,SAAAC,GAAOC,OAAAA,EAAaD,MAIvBC,EAAe,SAAAC,GAASvC,OAAAA,EAAWc,WAAkHyB,qGAAAA,OAAAA,EAAjI,gBACpBJ,EAAc,SAAA7B,GAASN,OAAAA,EAAWc,WAAyHR,6GAAAA,OAAAA,EAAxI,iBAEnB2B,EAAW,SAAAR,GAAQzB,OAAAA,EAAWc,WAAsEW,yDAAAA,OAAAA,EAAKC,SAAkBD,WAAAA,OAAAA,EAAKI,YAAjH,QAEfW,EAAc,WAAMrC,OAAAA,EAAasC,UAAUC,OAAO,wBAGlD7B,EAAY,SAAyB,GAAdF,IAAAA,EAARJ,EAAAA,OACboC,EAAa1C,SAASC,cAAc,0BAE1CyC,EAAWC,IAAMjC,EAAQiC,IACzBD,EAAWE,IAAMlC,EAAQkC,IACzBL,KA1DkBvC,SAASC,cAAc,qBAE/BgC,iBAAiB,SAAU9B,GACrCD,EAAa+B,iBAAiB,QAASM,IA8D3CvC,SAASiC,iBAAqC,mBAAA,WAAMnC,OAAAA","file":"bonus.a6d3fd52.map","sourceRoot":"..","sourcesContent":["import './bonus.scss';\n\nconst bonusComponent = () => {\n  // Declaration of variables used in different methods.\n  const resultList = document.querySelector('[data-bonusresults]');\n  const modalWrapper = document.querySelector('[data-bonusModal]');\n\n  const init = () => {\n    const searchBox = document.querySelector('[data-bonusInput]');\n    \n    searchBox.addEventListener('change', searchQuery);\n    modalWrapper.addEventListener('click', toggleModal);\n  }\n\n  const searchQuery = (event) => {\n    const query = event.target.value;\n\n    // remove Event Listeners before removing DOM elements to avoid possible memory leaks.\n    resultList.querySelectorAll('[data-bonusImageItem]').forEach( element => element.removeEventListener('click', openImage));\n    resultList.innerHTML = '';\n    fetch(`https://images-api.nasa.gov/search?q=${query}&media_type=image`)\n    .then(response => {\n      // If the request is successful, convert it to JSON and return it\n      if (response.ok) {\n        return response.json();\n      }\n      // If the request fails throw an error which will be caught below\n      throw Error(response.statusText);\n    })\n    // When the JSON conversion is done and returned we process it here\n    .then(json => {\n      const collection = json.collection.items.map(item => {\n        return {\n          imageSrc: item.links[0].href,\n          description: item.data[0].description_508,\n        }\n      });\n\n      if (!collection.length) {\n        zeroResults(query);\n        return;\n      }\n\n      collection.forEach(addImage);\n      resultList.querySelectorAll('[data-bonusImageItem]').forEach( element => {\n        element.addEventListener('click', openImage);\n      });\n\n    })\n    .catch(err => errorRequest(err));\n  }\n\n  // Error and Zero Results handling;\n  const errorRequest = error => resultList.innerHTML += `<p class=\"Bonus-zeroResult\">Oops, the following error has occurred: <span class=\"Bonus-errorText\">${error}</span></p>`;\n  const zeroResults = query => resultList.innerHTML += `<p class=\"Bonus-zeroResult\">We haven't found any result with the keyword <span class=\"Bonus-quotedQuery\">${query}</span></em>`;\n  // Adding image node with the collection item information\n  const addImage = item => resultList.innerHTML += `<img data-bonusImageItem class=\"Bonus-imageItem\" src=\"${item.imageSrc}\" alt=\"${item.description}\"/>`;\n  // Toggle active class to show and hide the modal\n  const toggleModal = () => modalWrapper.classList.toggle('Bonus-modal--active');\n\n  // Parameter deconstruction with assignment into a variable.\n  const openImage = ({ target: element }) => {\n    const modalImage = document.querySelector('[data-bonusmodalimage]');\n\n    modalImage.src = element.src;\n    modalImage.alt = element.alt;\n    toggleModal();\n  }\n\n  init();\n};\n\n// We initialise the Accordion logic once we have the HTML in place.\ndocument.addEventListener(`DOMContentLoaded`, () => bonusComponent());"]}